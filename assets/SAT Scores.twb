<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10000.16.0917.1429                               -->
<workbook source-build='10.0.1 (10000.16.0917.1429)' source-platform='mac' version='10.0' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='sat_scores' inline='true' name='federated.158ditn0fg7vx811mgy7g0911jsf' version='10.0'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='sat_scores' name='textscan.1jlud0c1wwanjj11c5epk1lgpqsu'>
            <connection class='textscan' directory='/Users/Shreyas/Projects/dsi-sea-project01/assets' filename='sat_scores.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1jlud0c1wwanjj11c5epk1lgpqsu' name='sat_scores.csv' table='[sat_scores#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='State' ordinal='0' />
            <column datatype='integer' name='Rate' ordinal='1' />
            <column datatype='integer' name='Verbal' ordinal='2' />
            <column datatype='integer' name='Math' ordinal='3' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[sat_scores.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rate</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rate]</local-name>
            <parent-name>[sat_scores.csv]</parent-name>
            <remote-alias>Rate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Verbal</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Verbal]</local-name>
            <parent-name>[sat_scores.csv]</parent-name>
            <remote-alias>Verbal</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Math</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Math]</local-name>
            <parent-name>[sat_scores.csv]</parent-name>
            <remote-alias>Math</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[sat_scores.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Total' datatype='integer' name='[Calculation_1388093914951569411]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Verbal] +[Math]' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.395582' measure-ordering='alphabetic' measure-percentage='0.604418' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Math'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontsize='18'>Heat map of Average SAT Math Scores</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sat_scores' name='federated.158ditn0fg7vx811mgy7g0911jsf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.158ditn0fg7vx811mgy7g0911jsf'>
            <column datatype='integer' name='[Math]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Math]' derivation='Sum' name='[sum:Math:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AK&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AR&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AZ&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CO&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;DC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;FL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;GA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;HI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ID&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;KS&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;KY&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;LA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MD&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ME&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MO&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MS&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ND&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NE&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NH&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NJ&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NM&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NV&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NY&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OH&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OK&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OR&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;PA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;RI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;SC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;SD&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;TN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;TX&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;UT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;VA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;VT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WV&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WY&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[Longitude (generated)]' field-type='quantitative' max='-2686095.7138989158' min='-20042804.600670457' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[Latitude (generated)]' field-type='quantitative' max='10230390.720701607' min='436667.16057854355' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Math:qk]' palette='orange_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]' />
              <color column='[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Math:qk]' />
              <geometry column='[federated.158ditn0fg7vx811mgy7g0911jsf].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.158ditn0fg7vx811mgy7g0911jsf].[Latitude (generated)]</rows>
        <cols>[federated.158ditn0fg7vx811mgy7g0911jsf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Rate'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontsize='18'>Heat map of Participation Rate for SAT</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sat_scores' name='federated.158ditn0fg7vx811mgy7g0911jsf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.158ditn0fg7vx811mgy7g0911jsf'>
            <column datatype='integer' name='[Rate]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Rate]' derivation='Sum' name='[sum:Rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AK&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AR&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AZ&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CO&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;DC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;FL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;GA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;HI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ID&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;KS&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;KY&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;LA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MD&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ME&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MO&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MS&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ND&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NE&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NH&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NJ&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NM&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NV&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NY&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OH&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OK&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OR&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;PA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;RI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;SC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;SD&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;TN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;TX&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;UT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;VA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;VT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WV&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WY&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[Longitude (generated)]' field-type='quantitative' max='-7319214.4481847119' min='-18011201.504866116' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[Latitude (generated)]' field-type='quantitative' max='8959985.4913453832' min='1997988.4398258915' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Rate:qk]' palette='orange_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]' value='false' />
            <format attr='break-on-special' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]' />
              <color column='[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Rate:qk]' />
              <geometry column='[federated.158ditn0fg7vx811mgy7g0911jsf].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.158ditn0fg7vx811mgy7g0911jsf].[Latitude (generated)]</rows>
        <cols>[federated.158ditn0fg7vx811mgy7g0911jsf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Total Score'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontsize='18'>Heat map of  Avg Total SAT Score</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sat_scores' name='federated.158ditn0fg7vx811mgy7g0911jsf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.158ditn0fg7vx811mgy7g0911jsf'>
            <column caption='Total' datatype='integer' name='[Calculation_1388093914951569411]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Verbal] +[Math]' />
            </column>
            <column datatype='integer' name='[Math]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Rate]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='integer' name='[Verbal]' role='measure' type='quantitative' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1388093914951569411]' derivation='Sum' name='[sum:Calculation_1388093914951569411:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Rate]' derivation='Sum' name='[sum:Rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AK&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AR&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AZ&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CO&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;DC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;FL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;GA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;HI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ID&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;KS&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;KY&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;LA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MD&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ME&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MO&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MS&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ND&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NE&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NH&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NJ&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NM&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NV&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NY&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OH&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OK&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OR&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;PA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;RI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;SC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;SD&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;TN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;TX&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;UT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;VA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;VT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WV&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WY&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[Longitude (generated)]' field-type='quantitative' max='-7692406.7873937134' min='-16217994.661341622' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[Latitude (generated)]' field-type='quantitative' max='7487593.9673624653' min='1850266.4752009897' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Calculation_1388093914951569411:qk]' palette='orange_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]' />
              <color column='[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Calculation_1388093914951569411:qk]' />
              <lod column='[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Rate:qk]' />
              <geometry column='[federated.158ditn0fg7vx811mgy7g0911jsf].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.158ditn0fg7vx811mgy7g0911jsf].[Latitude (generated)]</rows>
        <cols>[federated.158ditn0fg7vx811mgy7g0911jsf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Verbal'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontsize='18'>Heat map of Average SAT Verbal Scores</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sat_scores' name='federated.158ditn0fg7vx811mgy7g0911jsf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.158ditn0fg7vx811mgy7g0911jsf'>
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='integer' name='[Verbal]' role='measure' type='quantitative' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Verbal]' derivation='Sum' name='[sum:Verbal:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AK&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AR&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;AZ&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CO&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;CT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;DC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;FL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;GA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;HI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ID&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IL&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;IN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;KS&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;KY&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;LA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MD&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ME&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MO&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MS&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;MT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;ND&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NE&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NH&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NJ&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NM&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NV&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;NY&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OH&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OK&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;OR&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;PA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;RI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;SC&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;SD&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;TN&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;TX&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;UT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;VA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;VT&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WA&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WI&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WV&quot;' />
              <groupfilter function='member' level='[none:State:nk]' member='&quot;WY&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[Longitude (generated)]' field-type='quantitative' max='-6610296.7112117745' min='-18709675.613522887' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[Latitude (generated)]' field-type='quantitative' max='9201480.1980281901' min='1201074.5565000314' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Verbal:qk]' palette='orange_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]' />
              <color column='[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Verbal:qk]' />
              <geometry column='[federated.158ditn0fg7vx811mgy7g0911jsf].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.158ditn0fg7vx811mgy7g0911jsf].[Latitude (generated)]</rows>
        <cols>[federated.158ditn0fg7vx811mgy7g0911jsf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Rate'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]</field>
            <field>[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Rate:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Verbal'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Math'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Total Score'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.158ditn0fg7vx811mgy7g0911jsf].[none:State:nk]</field>
            <field>[federated.158ditn0fg7vx811mgy7g0911jsf].[sum:Calculation_1388093914951569411:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='16' />
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Math' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Rate' width='192'>
      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
      8qDx/wPpeoju0RyiGgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Total Score' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Verbal' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
